pub use filecaster_derive::FromFile;
use serde::{Deserialize, Serialize};

/// Marker for types that can be built from an `Option<Shadow>` produced by the macro.
pub trait FromFile: Sized {
    fn from_file(file: Option<Self::Shadow>) -> Self;

    /// Associated shadow type generated by the macro.
    type Shadow: Default + Serialize + for<'de> Deserialize<'de>;
}

impl<T> FromFile for T
where
    T: Default + Serialize + for<'de> Deserialize<'de>,
{
    type Shadow = T;
    fn from_file(file: Option<Self::Shadow>) -> Self {
        file.unwrap_or_default()
    }
}
